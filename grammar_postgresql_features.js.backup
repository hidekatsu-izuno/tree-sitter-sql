// Helper functions
function commaSep(rule) {
  return optional(commaSep1(rule));
}

function commaSep1(rule) {
  return seq(rule, repeat(seq(',', rule)));
}

// Common patterns
function alias($, mandatory_as = false) {
  return mandatory_as
    ? seq('AS', field('alias', $._identifier))
    : seq(optional('AS'), field('alias', $._identifier));
}

function if_not_exists() {
  return optional(seq('IF', 'NOT', 'EXISTS'));
}

function if_exists() {
  return optional(seq('IF', 'EXISTS'));
}

function column_list($) {
  return seq('(', commaSep1(field('column', $._identifier)), ')');
}

function qualified_table_name($, with_alias = true) {
  return with_alias
    ? seq(
        field('name', $._qualified_identifier),
        optional(alias($))
      )
    : field('name', $._qualified_identifier);
}

// Keyword groups
const DDL_KEYWORDS = [
  'CREATE', 'DROP', 'ALTER', 'TABLE', 'INDEX', 'VIEW', 'TRIGGER',
  'DATABASE', 'SCHEMA', 'VIRTUAL', 'TEMPORARY', 'TEMP', 'IF',
  'EXISTS', 'CASCADE', 'RESTRICT', 'RENAME', 'ADD', 'COLUMN',
  // PostgreSQL DDL extensions
  'FUNCTION', 'PROCEDURE', 'DOMAIN', 'TYPE', 'SEQUENCE', 'ROLE',
  'USER', 'TABLESPACE', 'EXTENSION', 'LANGUAGE', 'PUBLICATION',
  'SUBSCRIPTION', 'RULE', 'POLICY', 'TRANSFORM', 'OPERATOR',
  'AGGREGATE', 'CONVERSION', 'COLLATION', 'STATISTICS', 'FOREIGN',
  'WRAPPER', 'SERVER', 'MAPPING', 'ACCESS', 'METHOD', 'CAST',
  'EVENT', 'MATERIALIZED', 'UNLOGGED', 'LOGGED'
];

const DML_KEYWORDS = [
  'SELECT', 'INSERT', 'UPDATE', 'DELETE', 'FROM', 'WHERE', 'INTO',
  'VALUES', 'SET', 'JOIN', 'LEFT', 'RIGHT', 'INNER', 'OUTER',
  'CROSS', 'NATURAL', 'USING', 'ON', 'AS', 'GROUP', 'BY',
  'HAVING', 'ORDER', 'LIMIT', 'OFFSET', 'DISTINCT', 'ALL',
  // PostgreSQL DML extensions
  'FETCH', 'COPY', 'CALL', 'MERGE', 'UPSERT', 'TABLESAMPLE',
  'LATERAL', 'ORDINALITY', 'WITHIN', 'GROUPING', 'CUBE', 'ROLLUP',
  'SETS', 'ONLY', 'OVERRIDING', 'SYSTEM', 'USER'
];

const TRANSACTION_KEYWORDS = [
  'BEGIN', 'COMMIT', 'ROLLBACK', 'SAVEPOINT', 'RELEASE',
  'TRANSACTION', 'DEFERRED', 'IMMEDIATE', 'EXCLUSIVE',
  // PostgreSQL transaction extensions
  'START', 'END', 'WORK', 'ISOLATION', 'LEVEL', 'READ', 'WRITE',
  'UNCOMMITTED', 'COMMITTED', 'REPEATABLE', 'SERIALIZABLE',
  'DEFERRABLE', 'SNAPSHOT', 'PREPARED', 'PREPARE', 'EXECUTE',
  'DEALLOCATE', 'DISCARD', 'RESET', 'SHOW', 'LISTEN', 'NOTIFY',
  'UNLISTEN', 'LOAD', 'CLUSTER', 'CHECKPOINT', 'VACUUM_FULL'
];

const CONSTRAINT_KEYWORDS = [
  'PRIMARY', 'KEY', 'FOREIGN', 'UNIQUE', 'CHECK', 'DEFAULT',
  'CONSTRAINT', 'REFERENCES', 'AUTOINCREMENT', 'NOT', 'NULL',
  'COLLATE', 'GENERATED', 'ALWAYS', 'STORED', 'VIRTUAL',
  // PostgreSQL constraint extensions
  'IDENTITY', 'SERIAL', 'BIGSERIAL', 'SMALLSERIAL', 'EXCLUDE',
  'PARTIAL', 'VALIDATE', 'NOVALIDATE', 'ENABLE', 'DISABLE',
  'REPLICA', 'NOTHING', 'FULL', 'SIMPLE', 'CONCURRENTLY',
  'INCLUDE', 'NULLS', 'FIRST', 'LAST', 'INHERITS', 'LIKE',
  'INCLUDING', 'EXCLUDING', 'DEFAULTS', 'CONSTRAINTS', 'INDEXES',
  'STORAGE', 'COMMENTS', 'SECURITY'
];

const FUNCTION_KEYWORDS = [
  'COUNT', 'SUM', 'AVG', 'MIN', 'MAX', 'CAST', 'COALESCE',
  'NULLIF', 'SUBSTR', 'LENGTH', 'UPPER', 'LOWER', 'TRIM',
  'DATE', 'TIME', 'DATETIME', 'STRFTIME', 'JULIANDAY',
  // PostgreSQL function extensions
  'EXTRACT', 'SUBSTRING', 'POSITION', 'OVERLAY', 'GREATEST',
  'LEAST', 'ARRAY', 'ARRAY_AGG', 'STRING_AGG', 'XMLAGG',
  'JSON_AGG', 'JSON_OBJECT_AGG', 'PERCENTILE_CONT', 'PERCENTILE_DISC',
  'RANK', 'DENSE_RANK', 'ROW_NUMBER', 'NTILE', 'LAG', 'LEAD',
  'FIRST_VALUE', 'LAST_VALUE', 'NTH_VALUE', 'CUME_DIST', 'PERCENT_RANK',
  'REGR_SLOPE', 'REGR_INTERCEPT', 'CORR', 'COVAR_POP', 'COVAR_SAMP'
];

const OPERATOR_KEYWORDS = [
  'AND', 'OR', 'NOT', 'IN', 'BETWEEN', 'LIKE', 'GLOB', 'MATCH',
  'REGEXP', 'IS', 'ISNULL', 'NOTNULL', 'ESCAPE',
  // PostgreSQL operator extensions
  'ILIKE', 'SIMILAR', 'POSIX', 'OVERLAPS', 'ANY', 'SOME', 'ALL',
  'SYMMETRIC', 'ASYMMETRIC', 'DISTINCT', 'ZONE', 'AT', 'INTERVAL'
];

const MISC_KEYWORDS = [
  'PRAGMA', 'VACUUM', 'ANALYZE', 'REINDEX', 'ATTACH', 'DETACH',
  'EXPLAIN', 'QUERY', 'PLAN', 'WITH', 'RECURSIVE', 'WITHOUT',
  'ROWID', 'FILTER', 'OVER', 'PARTITION', 'WINDOW', 'ROWS',
  'RANGE', 'PRECEDING', 'FOLLOWING', 'CURRENT', 'ROW', 'UNBOUNDED',
  'EXCLUDE', 'TIES', 'GROUPS', 'NO', 'OTHERS', 'CASE', 'WHEN',
  'THEN', 'ELSE', 'END', 'RAISE', 'ABORT', 'FAIL', 'IGNORE',
  'REPLACE', 'CONFLICT', 'DO', 'NOTHING', 'RETURNING', 'ASC',
  'DESC', 'FULL', 'GLOB', 'EACH', 'FOR', 'OF', 'INSTEAD',
  'BEFORE', 'AFTER', 'NEW', 'OLD', 'UNION', 'INTERSECT', 'EXCEPT',
  'TRUE', 'FALSE', 'DEFERRABLE', 'INITIALLY', 'MATCH', 'ON',
  'USING', 'TO', 'INDEXED', 'ACTION', 'RESTRICT',
  // PostgreSQL misc extensions
  'VARIADIC', 'SETOF', 'OUT', 'INOUT', 'RETURNS', 'LANGUAGE',
  'IMMUTABLE', 'STABLE', 'VOLATILE', 'STRICT', 'LEAKPROOF',
  'CALLED', 'INPUT', 'OUTPUT', 'COST', 'PARALLEL', 'SAFE',
  'RESTRICTED', 'UNSAFE', 'TRANSFORM', 'SUPPORT', 'WINDOW',
  'DELIMITER', 'QUOTE', 'ESCAPE', 'FORCE', 'ENCODING', 'FREEZE',
  'VERBOSE', 'ANALYZE', 'BUFFERS', 'TIMING', 'SUMMARY', 'FORMAT',
  'YAML', 'XML', 'JSON', 'TEXT', 'CSV', 'BINARY', 'OIDS',
  'HEADER', 'PROGRAM', 'STDIN', 'STDOUT', 'PSTDIN', 'PSTDOUT'
];

// Grouped binary operators by precedence
const OPERATORS_BY_PRECEDENCE = {
  1: ['||'],  // String concatenation
  2: ['*', '/', '%'],  // Multiplication, division, modulo
  3: ['+', '-'],  // Addition, subtraction
  4: ['<<', '>>', '&', '|'],  // Bitwise operators
  5: ['<', '<=', '>', '>='],  // Comparison
  6: ['=', '==', '!=', '<>', 'IS', 'IS NOT', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', 'GLOB', 'NOT GLOB', 'MATCH', 'NOT MATCH', 'REGEXP', 'NOT REGEXP'],  // Equality and pattern matching
  7: ['AND'],  // Logical AND
  8: ['OR'],  // Logical OR
};

module.exports = grammar({
  name: 'sql',

  extras: $ => [
    /\s/,
    $.comment,
  ],

  conflicts: $ => [
    [$.identifier, $._keyword],
    [$._expression, $.select_statement],
    [$.column_definition, $.table_constraint],
    [$.qualified_identifier, $._identifier],
    [$._qualified_identifier, $.qualified_identifier],
    [$._expression, $.qualified_identifier],
    [$.table_or_subquery],
    [$.table_or_subquery, $.join_clause],
    [$.column_constraint],
    [$.exists_expression],
    [$.foreign_key_clause],
    [$.create_trigger_statement, $.commit_statement],
    [$.values_clause],
    [$.on_conflict_clause, $._expression],
    [$.join_clause],
    [$.qualified_identifier, $.reindex_statement],
    [$._statement],
    [$.binary_expression, $.unary_expression, $.in_expression, $.between_expression, $.like_expression, $.collate_expression, $.is_expression],
    [$.qualified_identifier, $.function_call],
    [$._qualified_identifier, $._expression],
    [$.null, $.is_expression],
    [$.boolean, $.is_expression],
    [$.binary_expression, $.in_expression],
    [$.binary_expression, $.like_expression],
    [$.binary_expression, $.is_expression],
    [$.select_statement, $.insert_statement],
    [$._pragma_value, $._literal_value],
    [$.like_expression, $.collate_expression],
    [$.like_expression, $.null_expression],
    [$.in_expression, $.between_expression, $.like_expression],
    [$.between_expression, $.like_expression],
    [$.unary_expression, $.is_expression],
    [$.binary_expression, $.in_expression, $.between_expression, $.like_expression],
    [$.binary_expression, $.between_expression, $.like_expression],
    [$.create_schema_statement],
    [$.copy_statement],
    [$.grant_statement],
  ],

  precedences: $ => [
    ['unary', 'binary'],
    ['member', 'call'],
  ],

  word: $ => $.identifier,

  rules: {
    source_file: $ => repeat($._statement),

    _statement: $ => seq(
      choice(
        $.select_statement,
        $.insert_statement,
        $.update_statement,
        $.delete_statement,
        $.create_table_statement,
        $.create_index_statement,
        $.create_view_statement,
        $.create_trigger_statement,
        $.create_virtual_table_statement,
        $.drop_statement,
        $.alter_table_statement,
        $.pragma_statement,
        $.attach_statement,
        $.detach_statement,
        $.vacuum_statement,
        $.analyze_statement,
        $.reindex_statement,
        $.begin_statement,
        $.commit_statement,
        $.rollback_statement,
        $.savepoint_statement,
        $.release_statement,
        $.explain_statement,
        // PostgreSQL-specific statements
        $.call_statement,
        $.copy_statement,
        $.create_function_statement,
        $.create_procedure_statement,
        $.create_role_statement,
        $.create_schema_statement,
        $.create_sequence_statement,
        $.create_type_statement,
        $.alter_role_statement,
        $.set_statement,
        $.reset_statement,
        $.show_statement,
        $.grant_statement,
        $.revoke_statement,
        $.truncate_statement,
        $.cluster_statement,
        $.checkpoint_statement,
        $.discard_statement,
        $.listen_statement,
        $.notify_statement,
        $.unlisten_statement,
        $.prepare_statement,
        $.execute_statement,
        $.deallocate_statement,
        $.create_policy_statement,
        $.alter_policy_statement,
        $.drop_policy_statement,
      ),
      optional(';')
    ),

    comment: $ => token(choice(
      seq('--', /.*/),
      seq(
        '/*',
        /[^*]*\*+([^/*][^*]*\*+)*/,
        '/'
      )
    )),

    // Identifiers
    identifier: $ => /[a-zA-Z_][a-zA-Z0-9_]*/,

    qualified_identifier: $ => seq(
      optional(seq(field('schema', $.identifier), '.')),
      field('name', $.identifier)
    ),

    quoted_identifier: $ => choice(
      seq('`', /[^`]+/, '`'),
      seq('[', /[^\]]+/, ']'),
      seq('"', /[^"]+/, '"')
    ),

    _identifier: $ => choice(
      $.identifier,
      $.quoted_identifier
    ),

    _qualified_identifier: $ => choice(
      $.qualified_identifier,
      $.quoted_identifier
    ),

    // Keywords - now organized by category
    _keyword: $ => choice(
      ...DDL_KEYWORDS,
      ...DML_KEYWORDS,
      ...TRANSACTION_KEYWORDS,
      ...CONSTRAINT_KEYWORDS,
      ...FUNCTION_KEYWORDS,
      ...OPERATOR_KEYWORDS,
      ...MISC_KEYWORDS
    ),

    // SELECT statement
    select_statement: $ => seq(
      optional($.with_clause),
      choice(
        $.select_core,
        $.values_clause
      ),
      repeat($.compound_operator),
      optional($.order_by_clause),
      optional($.limit_clause)
    ),

    with_clause: $ => seq(
      'WITH',
      optional('RECURSIVE'),
      commaSep1($.common_table_expression)
    ),

    common_table_expression: $ => seq(
      field('name', $.identifier),
      optional(column_list($)),
      'AS',
      '(',
      field('query', $.select_statement),
      ')'
    ),

    select_core: $ => seq(
      'SELECT',
      optional(choice('DISTINCT', 'ALL')),
      field('columns', $.select_list),
      optional($.from_clause),
      optional($.where_clause),
      optional($.group_by_clause),
      optional($.window_clause)
    ),

    select_list: $ => choice(
      '*',
      commaSep1($.result_column)
    ),

    result_column: $ => choice(
      seq(field('table', $.identifier), '.', '*'),
      seq(field('expression', $._expression), optional(alias($)))
    ),

    from_clause: $ => seq(
      'FROM',
      $.table_or_subquery,
      repeat($.join_clause)
    ),

    table_or_subquery: $ => choice(
      seq(
        qualified_table_name($),
        optional(choice(
          seq('INDEXED', 'BY', field('index', $.identifier)),
          seq('NOT', 'INDEXED')
        ))
      ),
      seq(
        '(',
        choice(
          $.select_statement,
          $.table_or_subquery,
          seq($.table_or_subquery, repeat1($.join_clause))
        ),
        ')',
        optional(alias($))
      )
    ),

    join_clause: $ => seq(
      optional(choice('NATURAL')),
      optional(choice('LEFT', 'RIGHT', 'FULL')),
      optional('OUTER'),
      choice('JOIN', 'INNER JOIN', 'CROSS JOIN', ','),
      $.table_or_subquery,
      optional($.join_constraint)
    ),

    join_constraint: $ => choice(
      seq('ON', field('condition', $._expression)),
      seq('USING', column_list($))
    ),

    where_clause: $ => seq('WHERE', field('condition', $._expression)),

    group_by_clause: $ => seq(
      'GROUP', 'BY',
      commaSep1(field('expression', $._expression)),
      optional(seq('HAVING', field('having', $._expression)))
    ),

    window_clause: $ => seq(
      'WINDOW',
      commaSep1(seq(
        field('name', $.identifier),
        'AS',
        $.window_definition
      ))
    ),

    window_definition: $ => seq(
      '(',
      optional(seq('PARTITION', 'BY', commaSep1($._expression))),
      optional($.order_by_clause),
      optional($.frame_spec),
      ')'
    ),

    frame_spec: $ => seq(
      choice('RANGE', 'ROWS', 'GROUPS'),
      choice(
        seq('BETWEEN', $.frame_bound, 'AND', $.frame_bound),
        $.frame_bound
      ),
      optional(seq('EXCLUDE', choice('NO OTHERS', 'CURRENT ROW', 'GROUP', 'TIES')))
    ),

    frame_bound: $ => choice(
      'UNBOUNDED PRECEDING',
      seq($._expression, 'PRECEDING'),
      'CURRENT ROW',
      seq($._expression, 'FOLLOWING'),
      'UNBOUNDED FOLLOWING'
    ),

    order_by_clause: $ => seq(
      'ORDER', 'BY',
      commaSep1($.ordering_term)
    ),

    ordering_term: $ => seq(
      field('expression', $._expression),
      optional(choice('ASC', 'DESC')),
      optional(seq('NULLS', choice('FIRST', 'LAST')))
    ),

    limit_clause: $ => seq(
      'LIMIT',
      field('limit', $._expression),
      optional(seq(choice('OFFSET', ','), field('offset', $._expression)))
    ),

    compound_operator: $ => seq(
      field('operator', choice('UNION', 'UNION ALL', 'INTERSECT', 'EXCEPT')),
      $.select_core
    ),

    // INSERT statement
    insert_statement: $ => seq(
      optional($.with_clause),
      choice('INSERT', 'REPLACE'),
      optional(choice('OR', 'ROLLBACK', 'ABORT', 'REPLACE', 'FAIL', 'IGNORE')),
      'INTO',
      qualified_table_name($, false),
      optional(alias($)),
      choice(
        seq(
          optional(column_list($)),
          $.values_clause,
          optional($.on_conflict_clause)
        ),
        seq(
          optional(column_list($)),
          field('select', $.select_statement),
          optional($.on_conflict_clause)
        ),
        seq('DEFAULT', 'VALUES')
      ),
      optional($.returning_clause)
    ),

    values_clause: $ => seq(
      'VALUES',
      commaSep1(seq(
        '(',
        commaSep1(field('value', $._expression)),
        ')'
      ))
    ),

    on_conflict_clause: $ => seq(
      'ON', 'CONFLICT',
      optional(seq(
        '(',
        commaSep1(field('column', $.identifier)),
        optional($.where_clause),
        ')'
      )),
      'DO',
      choice(
        'NOTHING',
        seq(
          'UPDATE',
          'SET',
          commaSep1($.update_set)
        )
      ),
      optional($.where_clause)
    ),

    update_set: $ => seq(
      choice(
        field('column', $.identifier),
        seq('(', commaSep1(field('column', $.identifier)), ')')
      ),
      '=',
      field('value', $._expression)
    ),

    returning_clause: $ => seq(
      'RETURNING',
      choice(
        '*',
        commaSep1(seq(
          field('expression', $._expression),
          optional(alias($))
        ))
      )
    ),

    // UPDATE statement
    update_statement: $ => seq(
      optional($.with_clause),
      'UPDATE',
      optional(choice('OR', 'ROLLBACK', 'ABORT', 'REPLACE', 'FAIL', 'IGNORE')),
      qualified_table_name($),
      'SET',
      commaSep1($.update_set),
      optional($.where_clause),
      optional($.returning_clause)
    ),

    // DELETE statement
    delete_statement: $ => seq(
      optional($.with_clause),
      'DELETE',
      'FROM',
      qualified_table_name($),
      optional($.where_clause),
      optional($.returning_clause)
    ),

    // CREATE TABLE statement
    create_table_statement: $ => seq(
      'CREATE',
      optional(choice('TEMP', 'TEMPORARY', 'UNLOGGED')),
      'TABLE',
      if_not_exists(),
      qualified_table_name($, false),
      choice(
        // Regular table creation
        seq(
          '(',
          commaSep1(choice(
            $.column_definition,
            $.table_constraint
          )),
          ')',
          optional(seq('WITHOUT', 'ROWID'))
        ),
        // Table creation from SELECT
        seq('AS', field('select', $.select_statement)),
        // PostgreSQL partition table
        seq(
          'PARTITION', 'OF',
          field('parent_table', $._qualified_identifier),
          optional(seq(
            '(',
            commaSep1(choice(
              $.column_definition,
              $.table_constraint
            )),
            ')'
          )),
          $.partition_bound_spec
        )
      ),
      // PostgreSQL-specific table options
      optional(seq('INHERITS', '(', commaSep1($._qualified_identifier), ')')),
      optional($.partition_by_clause),
      optional(seq('USING', field('access_method', $.identifier))),
      optional(seq('WITH', '(', commaSep1($.storage_parameter), ')')),
      optional(seq('ON', 'COMMIT', choice('PRESERVE ROWS', 'DELETE ROWS', 'DROP'))),
      optional(seq('TABLESPACE', field('tablespace', $.identifier))),
      optional(seq('STRICT', optional(seq(',', 'WITHOUT', 'ROWID'))))
    ),

    // PostgreSQL partitioning
    partition_by_clause: $ => seq(
      'PARTITION', 'BY',
      choice(
        seq('RANGE', '(', commaSep1($.partition_element), ')'),
        seq('LIST', '(', commaSep1($.partition_element), ')'),
        seq('HASH', '(', commaSep1($.partition_element), ')')
      )
    ),

    partition_element: $ => choice(
      field('column', $.identifier),
      seq('(', field('expression', $._expression), ')'),
      seq(field('column', $.identifier), field('opclass', $._qualified_identifier))
    ),

    partition_bound_spec: $ => choice(
      seq('FOR', 'VALUES', 'IN', '(', commaSep1($._expression), ')'),
      seq('FOR', 'VALUES', 'FROM', '(', commaSep1($._expression), ')', 'TO', '(', commaSep1($._expression), ')'),
      seq('FOR', 'VALUES', 'WITH', '(', 'MODULUS', field('modulus', $.integer), ',', 'REMAINDER', field('remainder', $.integer), ')'),
      seq('DEFAULT')
    ),

    storage_parameter: $ => seq(
      field('parameter', $.identifier),
      optional(seq('=', field('value', choice($._expression, $.boolean))))
    ),

    column_definition: $ => seq(
      field('name', $.identifier),
      optional(field('type', $.type_name)),
      repeat($.column_constraint)
    ),

    type_name: $ => choice(
      // Basic type name with optional size/precision
      seq(
        field('name', choice(
          // SQLite types
          'INTEGER', 'REAL', 'TEXT', 'BLOB', 'NUMERIC',
          'INT', 'TINYINT', 'SMALLINT', 'MEDIUMINT', 'BIGINT',
          'UNSIGNED BIG INT', 'INT2', 'INT8',
          'CHARACTER', 'VARCHAR', 'VARYING CHARACTER', 'NCHAR',
          'NATIVE CHARACTER', 'NVARCHAR', 'CLOB',
          'DOUBLE', 'DOUBLE PRECISION', 'FLOAT',
          'BOOLEAN', 'DATE', 'DATETIME', 'DECIMAL',
          // PostgreSQL basic types
          'SERIAL', 'BIGSERIAL', 'SMALLSERIAL', 'MONEY',
          'BYTEA', 'UUID', 'JSONB', 'JSON', 'XML',
          'CIDR', 'INET', 'MACADDR', 'MACADDR8',
          'BIT', 'VARBIT', 'POINT', 'LINE', 'LSEG', 'BOX', 'PATH',
          'POLYGON', 'CIRCLE', 'TSQUERY', 'TSVECTOR',
          'INTERVAL', 'TIMESTAMP', 'TIMESTAMPTZ', 'TIME', 'TIMETZ',
          'DATERANGE', 'TSRANGE', 'TSTZRANGE', 'NUMRANGE',
          'INT4RANGE', 'INT8RANGE', 'OID', 'REGPROC', 'REGPROCEDURE',
          'REGOPER', 'REGOPERATOR', 'REGCLASS', 'REGTYPE', 'REGCONFIG',
          'REGDICTIONARY', 'PG_LSN', 'TXID_SNAPSHOT'
        )),
        optional(seq(
          '(',
          field('size', $.integer),
          optional(seq(',', field('scale', $.integer))),
          ')'
        ))
      ),
      // Array types
      seq(
        $.type_name,
        '[]'
      ),
      // Custom type reference
      $._qualified_identifier
    ),

    column_constraint: $ => seq(
      optional(seq('CONSTRAINT', field('name', $.identifier))),
      choice(
        seq('PRIMARY', 'KEY', optional(choice('ASC', 'DESC')), optional($.conflict_clause), optional('AUTOINCREMENT')),
        seq('NOT', 'NULL', optional($.conflict_clause)),
        seq('UNIQUE', optional($.conflict_clause)),
        seq('CHECK', '(', field('expression', $._expression), ')'),
        seq('DEFAULT', field('value', choice($._expression, $._literal_value))),
        seq('COLLATE', field('collation', $.identifier)),
        $.foreign_key_clause,
        seq(
          optional(seq('GENERATED', 'ALWAYS')),
          'AS',
          '(',
          field('expression', $._expression),
          ')',
          optional(choice('STORED', 'VIRTUAL'))
        )
      )
    ),

    table_constraint: $ => seq(
      optional(seq('CONSTRAINT', field('name', $.identifier))),
      choice(
        seq(
          choice('PRIMARY KEY', 'UNIQUE'),
          '(',
          commaSep1(seq(
            field('column', $.identifier),
            optional(choice('ASC', 'DESC'))
          )),
          ')',
          optional($.conflict_clause)
        ),
        seq(
          'CHECK',
          '(',
          field('expression', $._expression),
          ')'
        ),
        seq(
          'FOREIGN', 'KEY',
          column_list($),
          $.foreign_key_clause
        ),
        // PostgreSQL EXCLUDE constraint
        seq(
          'EXCLUDE',
          optional(seq('USING', field('index_method', $.identifier))),
          '(',
          commaSep1($.exclude_element),
          ')',
          optional(seq('WHERE', '(', field('predicate', $._expression), ')'))
        )
      )
    ),

    exclude_element: $ => seq(
      choice(
        field('column', $.identifier),
        seq('(', field('expression', $._expression), ')')
      ),
      'WITH',
      field('operator', choice('=', '<>', '<', '>', '<=', '>=', '&&', '@>', '<@', '&<', '&>', '<<', '>>', '&<|', '|&>', '~='))
    ),

    foreign_key_clause: $ => seq(
      'REFERENCES',
      field('table', $._qualified_identifier),
      optional(column_list($)),
      repeat(choice(
        seq(
          'ON',
          choice('DELETE', 'UPDATE'),
          choice('SET NULL', 'SET DEFAULT', 'CASCADE', 'RESTRICT', 'NO ACTION')
        ),
        seq('MATCH', field('name', $.identifier))
      )),
      optional(seq(
        optional('NOT'),
        'DEFERRABLE',
        optional(seq('INITIALLY', choice('DEFERRED', 'IMMEDIATE')))
      ))
    ),

    conflict_clause: $ => seq(
      'ON', 'CONFLICT',
      choice('ROLLBACK', 'ABORT', 'FAIL', 'IGNORE', 'REPLACE')
    ),

    // CREATE INDEX statement
    create_index_statement: $ => seq(
      'CREATE',
      optional('UNIQUE'),
      'INDEX',
      if_not_exists(),
      field('name', $._qualified_identifier),
      'ON',
      field('table', $._qualified_identifier),
      '(',
      commaSep1($.indexed_column),
      ')',
      optional($.where_clause)
    ),

    indexed_column: $ => seq(
      field('expression', $._expression),
      optional(choice('ASC', 'DESC'))
    ),

    // CREATE VIEW statement
    create_view_statement: $ => seq(
      'CREATE',
      optional(choice('TEMP', 'TEMPORARY')),
      'VIEW',
      if_not_exists(),
      field('name', $._qualified_identifier),
      optional(column_list($)),
      'AS',
      field('select', $.select_statement)
    ),

    // CREATE TRIGGER statement
    create_trigger_statement: $ => seq(
      'CREATE',
      optional(choice('TEMP', 'TEMPORARY')),
      'TRIGGER',
      if_not_exists(),
      field('name', $._qualified_identifier),
      optional(choice('BEFORE', 'AFTER', 'INSTEAD OF')),
      choice(
        'DELETE',
        'INSERT',
        seq('UPDATE', optional(seq('OF', commaSep1(field('column', $.identifier)))))
      ),
      'ON',
      field('table', $._qualified_identifier),
      optional(seq('FOR', 'EACH', 'ROW')),
      optional(seq('WHEN', field('condition', $._expression))),
      'BEGIN',
      repeat1($._statement),
      'END'
    ),

    // CREATE VIRTUAL TABLE statement
    create_virtual_table_statement: $ => seq(
      'CREATE', 'VIRTUAL', 'TABLE',
      if_not_exists(),
      field('name', $._qualified_identifier),
      'USING',
      field('module', $.identifier),
      optional(seq(
        '(',
        commaSep(field('argument', choice($.identifier, $._literal_value))),
        ')'
      ))
    ),

    // DROP statement
    drop_statement: $ => seq(
      'DROP',
      field('type', choice('TABLE', 'INDEX', 'VIEW', 'TRIGGER')),
      if_exists(),
      field('name', $._qualified_identifier)
    ),

    // ALTER TABLE statement
    alter_table_statement: $ => seq(
      'ALTER', 'TABLE',
      optional('IF EXISTS'),
      optional('ONLY'),
      field('table', $._qualified_identifier),
      optional('*'),
      commaSep1($.alter_table_action)
    ),

    alter_table_action: $ => choice(
      // Column operations
      seq('ADD', optional('COLUMN'), $.column_definition),
      seq('DROP', optional('COLUMN'), optional('IF EXISTS'), field('column', $.identifier), optional(choice('RESTRICT', 'CASCADE'))),
      seq('ALTER', optional('COLUMN'), field('column', $.identifier), $.alter_column_action),
      seq('RENAME', optional('COLUMN'), field('old_name', $.identifier), 'TO', field('new_name', $.identifier)),
      
      // Constraint operations
      seq('ADD', $.table_constraint),
      seq('ALTER', 'CONSTRAINT', field('constraint', $.identifier), choice('DEFERRABLE', 'NOT DEFERRABLE'), optional(choice('INITIALLY DEFERRED', 'INITIALLY IMMEDIATE'))),
      seq('VALIDATE', 'CONSTRAINT', field('constraint', $.identifier)),
      seq('DROP', 'CONSTRAINT', optional('IF EXISTS'), field('constraint', $.identifier), optional(choice('RESTRICT', 'CASCADE'))),
      
      // Table operations
      seq('RENAME', 'TO', field('new_name', $.identifier)),
      seq('SET', 'SCHEMA', field('schema', $.identifier)),
      seq('ATTACH', 'PARTITION', field('partition', $._qualified_identifier), $.partition_bound_spec),
      seq('DETACH', 'PARTITION', field('partition', $._qualified_identifier)),
      
      // Row-Level Security
      seq(choice('ENABLE', 'DISABLE'), 'ROW', 'LEVEL', 'SECURITY'),
      seq(choice('FORCE', 'NO FORCE'), 'ROW', 'LEVEL', 'SECURITY'),
      
      // Table settings
      seq('SET', '(', commaSep1($.storage_parameter), ')'),
      seq('RESET', '(', commaSep1(field('parameter', $.identifier)), ')'),
      seq('INHERIT', field('parent', $._qualified_identifier)),
      seq('NO', 'INHERIT', field('parent', $._qualified_identifier)),
      seq('OF', field('type', $._qualified_identifier)),
      seq('NOT', 'OF'),
      seq('OWNER', 'TO', field('owner', choice($.identifier, 'CURRENT_USER', 'SESSION_USER'))),
      seq('SET', 'TABLESPACE', field('tablespace', $.identifier)),
      seq('SET', 'WITHOUT', choice('CLUSTER', 'OIDS')),
      seq('SET', 'WITH', choice('OIDS')),
      seq('CLUSTER', 'ON', field('index', $.identifier)),
      seq('SET', 'WITHOUT', 'CLUSTER'),
      seq('SET', '(', 'FILLFACTOR', '=', field('fillfactor', $.integer), ')'),
      seq('REPLICA', 'IDENTITY', choice('DEFAULT', 'USING INDEX', 'FULL', 'NOTHING', seq('USING', 'INDEX', field('index', $.identifier))))
    ),

    alter_column_action: $ => choice(
      seq('TYPE', field('type', $.type_name), optional(seq('COLLATE', field('collation', $._qualified_identifier))), optional(seq('USING', field('expression', $._expression)))),
      seq('SET', 'DEFAULT', field('default', $._expression)),
      seq('DROP', 'DEFAULT'),
      seq('SET', 'NOT', 'NULL'),
      seq('DROP', 'NOT', 'NULL'),
      seq('SET', 'STATISTICS', field('target', $.integer)),
      seq('SET', '(', commaSep1($.storage_parameter), ')'),
      seq('RESET', '(', commaSep1(field('parameter', $.identifier)), ')'),
      seq('SET', 'STORAGE', choice('PLAIN', 'EXTERNAL', 'EXTENDED', 'MAIN'))
    ),

    // PRAGMA statement
    pragma_statement: $ => seq(
      'PRAGMA',
      optional(seq(field('schema', $.identifier), '.')),
      field('name', $.identifier),
      optional(choice(
        seq('=', field('value', $._pragma_value)),
        seq('(', field('value', $._pragma_value), ')')
      ))
    ),

    _pragma_value: $ => choice(
      $.identifier,
      $._literal_value,
      $.boolean
    ),

    // ATTACH/DETACH statements
    attach_statement: $ => seq(
      'ATTACH',
      optional('DATABASE'),
      field('file', $._expression),
      'AS',
      field('schema', $.identifier)
    ),

    detach_statement: $ => seq(
      'DETACH',
      optional('DATABASE'),
      field('schema', $.identifier)
    ),

    // VACUUM statement
    vacuum_statement: $ => seq(
      'VACUUM',
      optional(field('schema', $.identifier)),
      optional(seq('INTO', field('file', $._expression)))
    ),

    // ANALYZE statement
    analyze_statement: $ => seq(
      'ANALYZE',
      optional(choice(
        field('schema', $.identifier),
        seq(
          field('schema', $.identifier),
          '.',
          field('table_or_index', $.identifier)
        )
      ))
    ),

    // REINDEX statement
    reindex_statement: $ => seq(
      'REINDEX',
      optional(choice(
        field('name', $.identifier),
        field('name', $._qualified_identifier)
      ))
    ),

    // Transaction statements
    begin_statement: $ => seq(
      'BEGIN',
      optional(choice('DEFERRED', 'IMMEDIATE', 'EXCLUSIVE')),
      optional('TRANSACTION')
    ),

    commit_statement: $ => seq(
      choice('COMMIT', 'END'),
      optional('TRANSACTION')
    ),

    rollback_statement: $ => seq(
      'ROLLBACK',
      optional('TRANSACTION'),
      optional(seq('TO', optional('SAVEPOINT'), field('savepoint', $.identifier)))
    ),

    savepoint_statement: $ => seq(
      'SAVEPOINT',
      field('name', $.identifier)
    ),

    release_statement: $ => seq(
      'RELEASE',
      optional('SAVEPOINT'),
      field('name', $.identifier)
    ),

    // EXPLAIN statement
    explain_statement: $ => seq(
      'EXPLAIN',
      optional(seq('QUERY', 'PLAN')),
      $._statement
    ),

    // Expressions
    _expression: $ => choice(
      $._literal_value,
      $.identifier,
      $.qualified_identifier,
      $.unary_expression,
      $.binary_expression,
      $.parenthesized_expression,
      $.cast_expression,
      $.case_expression,
      $.exists_expression,
      $.in_expression,
      $.between_expression,
      $.like_expression,
      $.is_expression,
      $.null_expression,
      $.collate_expression,
      $.function_call,
      $.subquery_expression,
      $.raise_expression,
    ),

    _literal_value: $ => choice(
      $.integer,
      $.real,
      $.string,
      $.blob,
      $.null,
      $.boolean
    ),

    integer: $ => /\d+/,

    real: $ => /\d+\.\d+([eE][+-]?\d+)?/,

    string: $ => choice(
      // Standard SQL strings
      seq(
        "'",
        repeat(choice(
          /[^']/,
          "''"
        )),
        "'"
      ),
      // PostgreSQL dollar-quoted strings
      $.dollar_quoted_string
    ),

    dollar_quoted_string: $ => seq(
      field('start_tag', /\$[^$]*\$/),
      field('content', repeat(/./)),
      field('end_tag', /\$[^$]*\$/)
    ),

    blob: $ => seq(
      choice('x', 'X'),
      "'",
      /[0-9a-fA-F]+/,
      "'"
    ),

    null: $ => 'NULL',

    boolean: $ => choice('TRUE', 'FALSE'),

    unary_expression: $ => prec.right('unary', choice(
      seq('-', field('operand', $._expression)),
      seq('+', field('operand', $._expression)),
      seq('NOT', field('operand', $._expression)),
      seq('~', field('operand', $._expression))
    )),

    binary_expression: $ => {
      const table = [];
      
      for (const [precedence, operators] of Object.entries(OPERATORS_BY_PRECEDENCE)) {
        for (const operator of operators) {
          table.push([parseInt(precedence), operator]);
        }
      }

      return choice(...table.map(([precedence, operator]) => 
        prec.left(precedence, seq(
          field('left', $._expression),
          field('operator', operator),
          field('right', $._expression)
        ))
      ));
    },

    parenthesized_expression: $ => seq('(', $._expression, ')'),

    cast_expression: $ => seq(
      'CAST',
      '(',
      field('expression', $._expression),
      'AS',
      field('type', $.type_name),
      ')'
    ),

    case_expression: $ => seq(
      'CASE',
      optional(field('expression', $._expression)),
      repeat1(seq(
        'WHEN',
        field('condition', $._expression),
        'THEN',
        field('result', $._expression)
      )),
      optional(seq('ELSE', field('else', $._expression))),
      'END'
    ),

    exists_expression: $ => seq(
      optional('NOT'),
      'EXISTS',
      '(',
      field('subquery', $.select_statement),
      ')'
    ),

    in_expression: $ => seq(
      field('expression', $._expression),
      optional('NOT'),
      'IN',
      choice(
        seq('(', commaSep1(field('value', $._expression)), ')'),
        seq('(', field('subquery', $.select_statement), ')'),
        qualified_table_name($, false),
        seq(
          qualified_table_name($, false),
          '(',
          commaSep1(field('argument', $._expression)),
          ')'
        )
      )
    ),

    between_expression: $ => seq(
      field('expression', $._expression),
      optional('NOT'),
      'BETWEEN',
      field('low', $._expression),
      'AND',
      field('high', $._expression)
    ),

    like_expression: $ => seq(
      field('expression', $._expression),
      optional('NOT'),
      choice('LIKE', 'GLOB', 'MATCH', 'REGEXP'),
      field('pattern', $._expression),
      optional(seq('ESCAPE', field('escape', $._expression)))
    ),

    is_expression: $ => seq(
      field('expression', $._expression),
      'IS',
      optional('NOT'),
      choice(
        'NULL',
        'TRUE',
        'FALSE',
        field('value', $._expression)
      )
    ),

    null_expression: $ => seq(
      field('expression', $._expression),
      choice('ISNULL', 'NOTNULL')
    ),

    collate_expression: $ => seq(
      field('expression', $._expression),
      'COLLATE',
      field('collation', $.identifier)
    ),

    function_call: $ => seq(
      field('name', $.identifier),
      '(',
      optional(choice(
        '*',
        seq(
          optional('DISTINCT'),
          commaSep1(field('argument', $._expression))
        )
      )),
      ')',
      optional(seq(
        optional(seq('FILTER', '(', 'WHERE', field('filter', $._expression), ')')),
        'OVER',
        choice(
          field('window', $.identifier),
          $.window_definition
        )
      ))
    ),

    subquery_expression: $ => seq(
      '(',
      $.select_statement,
      ')'
    ),

    raise_expression: $ => seq(
      'RAISE',
      '(',
      choice('IGNORE', 'ROLLBACK', 'ABORT', 'FAIL'),
      optional(seq(',', field('message', $.string))),
      ')'
    ),

    // PostgreSQL-specific statements
    call_statement: $ => seq(
      'CALL',
      field('procedure', $.function_call)
    ),

    copy_statement: $ => seq(
      'COPY',
      choice(
        seq(
          qualified_table_name($, false),
          optional(column_list($)),
          choice('FROM', 'TO'),
          choice(
            field('filename', $.string),
            'STDIN',
            'STDOUT',
            seq('PROGRAM', field('command', $.string))
          )
        ),
        seq(
          '(',
          field('query', $.select_statement),
          ')',
          'TO',
          choice(
            field('filename', $.string),
            'STDOUT',
            seq('PROGRAM', field('command', $.string))
          )
        )
      ),
      optional(seq(
        'WITH',
        '(',
        commaSep1($.copy_option),
        ')'
      ))
    ),

    copy_option: $ => choice(
      seq('FORMAT', field('format', choice('TEXT', 'CSV', 'BINARY'))),
      seq('DELIMITER', field('delimiter', $.string)),
      seq('NULL', field('null_string', $.string)),
      seq('HEADER', optional(field('boolean', $.boolean))),
      seq('QUOTE', field('quote', $.string)),
      seq('ESCAPE', field('escape', $.string)),
      seq('FORCE_QUOTE', choice('*', column_list($))),
      seq('FORCE_NOT_NULL', column_list($)),
      seq('FORCE_NULL', column_list($)),
      seq('ENCODING', field('encoding', $.string))
    ),

    create_function_statement: $ => seq(
      'CREATE',
      optional('OR REPLACE'),
      'FUNCTION',
      field('name', $._qualified_identifier),
      '(',
      optional(commaSep1($.function_parameter)),
      ')',
      optional(seq('RETURNS', field('return_type', $.type_name))),
      'AS',
      field('body', $.string),
      'LANGUAGE',
      field('language', $.identifier),
      repeat($.function_attribute)
    ),

    function_parameter: $ => seq(
      optional(choice('IN', 'OUT', 'INOUT', 'VARIADIC')),
      optional(field('name', $.identifier)),
      field('type', $.type_name),
      optional(seq('DEFAULT', field('default', $._expression)))
    ),

    function_attribute: $ => choice(
      'IMMUTABLE',
      'STABLE',
      'VOLATILE',
      'STRICT',
      'CALLED ON NULL INPUT',
      'RETURNS NULL ON NULL INPUT',
      'LEAKPROOF',
      'NOT LEAKPROOF',
      'SECURITY INVOKER',
      'SECURITY DEFINER',
      seq('COST', field('cost', $.integer)),
      seq('ROWS', field('rows', $.integer)),
      seq('SET', field('parameter', $.identifier), choice('TO', '='), field('value', $._expression)),
      seq('SET', field('parameter', $.identifier), 'FROM CURRENT')
    ),

    create_procedure_statement: $ => seq(
      'CREATE',
      optional('OR REPLACE'),
      'PROCEDURE',
      field('name', $._qualified_identifier),
      '(',
      optional(commaSep1($.function_parameter)),
      ')',
      'AS',
      field('body', $.string),
      'LANGUAGE',
      field('language', $.identifier),
      repeat($.function_attribute)
    ),

    create_role_statement: $ => seq(
      'CREATE',
      choice('ROLE', 'USER', 'GROUP'),
      field('name', $.identifier),
      repeat($.role_option)
    ),

    role_option: $ => choice(
      'SUPERUSER',
      'NOSUPERUSER',
      'CREATEDB',
      'NOCREATEDB',
      'CREATEROLE',
      'NOCREATEROLE',
      'INHERIT',
      'NOINHERIT',
      'LOGIN',
      'NOLOGIN',
      'REPLICATION',
      'NOREPLICATION',
      'BYPASSRLS',
      'NOBYPASSRLS',
      seq('CONNECTION LIMIT', field('limit', $.integer)),
      seq('PASSWORD', field('password', choice($.string, 'NULL'))),
      seq('ENCRYPTED PASSWORD', field('password', $.string)),
      seq('UNENCRYPTED PASSWORD', field('password', $.string)),
      seq('VALID UNTIL', field('timestamp', $.string)),
      seq('IN ROLE', commaSep1(field('role', $.identifier))),
      seq('IN GROUP', commaSep1(field('group', $.identifier))),
      seq('ROLE', commaSep1(field('role', $.identifier))),
      seq('ADMIN', commaSep1(field('admin', $.identifier))),
      seq('USER', commaSep1(field('user', $.identifier)))
    ),

    create_schema_statement: $ => seq(
      'CREATE', 'SCHEMA',
      optional(if_not_exists()),
      choice(
        field('name', $.identifier),
        seq('AUTHORIZATION', field('owner', $.identifier)),
        seq(field('name', $.identifier), 'AUTHORIZATION', field('owner', $.identifier))
      ),
      repeat($._statement)
    ),

    create_sequence_statement: $ => seq(
      'CREATE',
      optional('TEMPORARY'),
      'SEQUENCE',
      optional(if_not_exists()),
      field('name', $._qualified_identifier),
      repeat($.sequence_option)
    ),

    sequence_option: $ => choice(
      seq('AS', field('data_type', $.type_name)),
      seq('INCREMENT', optional('BY'), field('increment', $.integer)),
      seq('MINVALUE', field('minvalue', $.integer)),
      'NO MINVALUE',
      seq('MAXVALUE', field('maxvalue', $.integer)),
      'NO MAXVALUE',
      seq('START', optional('WITH'), field('start', $.integer)),
      seq('CACHE', field('cache', $.integer)),
      'CYCLE',
      'NO CYCLE',
      seq('OWNED BY', choice('NONE', seq(field('table', $._qualified_identifier), '.', field('column', $.identifier))))
    ),

    create_type_statement: $ => seq(
      'CREATE', 'TYPE',
      field('name', $._qualified_identifier),
      'AS',
      choice(
        seq('ENUM', '(', commaSep1(field('value', $.string)), ')'),
        seq('(', commaSep1($.composite_type_element), ')'),
        seq('RANGE', '(', commaSep1($.range_type_option), ')')
      )
    ),

    composite_type_element: $ => seq(
      field('name', $.identifier),
      field('type', $.type_name),
      optional(seq('COLLATE', field('collation', $._qualified_identifier)))
    ),

    range_type_option: $ => choice(
      seq('SUBTYPE', '=', field('subtype', $.type_name)),
      seq('SUBTYPE_OPCLASS', '=', field('opclass', $._qualified_identifier)),
      seq('COLLATION', '=', field('collation', $._qualified_identifier)),
      seq('CANONICAL', '=', field('canonical', $._qualified_identifier)),
      seq('SUBTYPE_DIFF', '=', field('subtype_diff', $._qualified_identifier))
    ),

    alter_role_statement: $ => seq(
      'ALTER',
      choice('ROLE', 'USER', 'GROUP'),
      field('name', $.identifier),
      repeat($.role_option)
    ),

    set_statement: $ => seq(
      'SET',
      optional(choice('SESSION', 'LOCAL')),
      choice(
        seq(field('parameter', $.identifier), choice('TO', '='), field('value', choice($._expression, 'DEFAULT'))),
        seq('TIME ZONE', field('timezone', choice($._expression, 'LOCAL', 'DEFAULT'))),
        seq('TRANSACTION ISOLATION LEVEL', field('level', choice('SERIALIZABLE', 'REPEATABLE READ', 'READ COMMITTED', 'READ UNCOMMITTED'))),
        seq('TRANSACTION', choice('READ WRITE', 'READ ONLY')),
        seq('TRANSACTION', optional('NOT'), 'DEFERRABLE')
      )
    ),

    reset_statement: $ => seq(
      'RESET',
      choice(
        field('parameter', $.identifier),
        'TIME ZONE',
        'TRANSACTION ISOLATION LEVEL',
        'ALL'
      )
    ),

    show_statement: $ => seq(
      'SHOW',
      choice(
        field('parameter', $.identifier),
        'TIME ZONE',
        'TRANSACTION ISOLATION LEVEL',
        'ALL'
      )
    ),

    grant_statement: $ => seq(
      'GRANT',
      choice(
        seq(
          choice(
            'ALL',
            seq('ALL', 'PRIVILEGES'),
            commaSep1($.privilege)
          ),
          'ON',
          choice(
            seq(optional('TABLE'), commaSep1($._qualified_identifier)),
            seq('ALL TABLES IN SCHEMA', commaSep1($.identifier)),
            seq('SEQUENCE', commaSep1($._qualified_identifier)),
            seq('ALL SEQUENCES IN SCHEMA', commaSep1($.identifier)),
            seq('DATABASE', commaSep1($.identifier)),
            seq('DOMAIN', commaSep1($._qualified_identifier)),
            seq('FOREIGN DATA WRAPPER', commaSep1($.identifier)),
            seq('FOREIGN SERVER', commaSep1($.identifier)),
            seq('FUNCTION', commaSep1($._qualified_identifier)),
            seq('ALL FUNCTIONS IN SCHEMA', commaSep1($.identifier)),
            seq('LANGUAGE', commaSep1($.identifier)),
            seq('SCHEMA', commaSep1($.identifier)),
            seq('TABLESPACE', commaSep1($.identifier)),
            seq('TYPE', commaSep1($._qualified_identifier))
          ),
          'TO',
          commaSep1($.grantee),
          optional(seq('WITH', 'GRANT', 'OPTION'))
        ),
        seq(
          commaSep1($.identifier),
          'TO',
          commaSep1($.grantee),
          optional(seq('WITH', 'ADMIN', 'OPTION'))
        )
      )
    ),

    privilege: $ => choice(
      'SELECT',
      'INSERT',
      'UPDATE',
      'DELETE',
      'TRUNCATE',
      'REFERENCES',
      'TRIGGER',
      'CREATE',
      'CONNECT',
      'TEMPORARY',
      'TEMP',
      'EXECUTE',
      'USAGE',
      seq('SELECT', column_list($)),
      seq('INSERT', column_list($)),
      seq('UPDATE', column_list($)),
      seq('REFERENCES', column_list($))
    ),

    grantee: $ => choice(
      'PUBLIC',
      $.identifier,
      seq('GROUP', $.identifier)
    ),

    revoke_statement: $ => seq(
      'REVOKE',
      optional(seq('GRANT', 'OPTION', 'FOR')),
      choice(
        seq(
          choice(
            'ALL',
            seq('ALL', 'PRIVILEGES'),
            commaSep1($.privilege)
          ),
          'ON',
          choice(
            seq(optional('TABLE'), commaSep1($._qualified_identifier)),
            seq('ALL TABLES IN SCHEMA', commaSep1($.identifier)),
            seq('SEQUENCE', commaSep1($._qualified_identifier)),
            seq('ALL SEQUENCES IN SCHEMA', commaSep1($.identifier)),
            seq('DATABASE', commaSep1($.identifier)),
            seq('DOMAIN', commaSep1($._qualified_identifier)),
            seq('FOREIGN DATA WRAPPER', commaSep1($.identifier)),
            seq('FOREIGN SERVER', commaSep1($.identifier)),
            seq('FUNCTION', commaSep1($._qualified_identifier)),
            seq('ALL FUNCTIONS IN SCHEMA', commaSep1($.identifier)),
            seq('LANGUAGE', commaSep1($.identifier)),
            seq('SCHEMA', commaSep1($.identifier)),
            seq('TABLESPACE', commaSep1($.identifier)),
            seq('TYPE', commaSep1($._qualified_identifier))
          ),
          'FROM',
          commaSep1($.grantee),
          optional(choice('CASCADE', 'RESTRICT'))
        ),
        seq(
          commaSep1($.identifier),
          'FROM',
          commaSep1($.grantee),
          optional(choice('CASCADE', 'RESTRICT'))
        )
      )
    ),

    truncate_statement: $ => seq(
      'TRUNCATE',
      optional('TABLE'),
      commaSep1(qualified_table_name($, false)),
      optional(choice('RESTART IDENTITY', 'CONTINUE IDENTITY')),
      optional(choice('CASCADE', 'RESTRICT'))
    ),

    cluster_statement: $ => seq(
      'CLUSTER',
      optional(seq(
        field('index', $._qualified_identifier),
        'ON'
      )),
      field('table', $._qualified_identifier)
    ),

    checkpoint_statement: $ => 'CHECKPOINT',

    discard_statement: $ => seq(
      'DISCARD',
      choice('ALL', 'PLANS', 'SEQUENCES', 'TEMPORARY', 'TEMP')
    ),

    listen_statement: $ => seq(
      'LISTEN',
      field('channel', $.identifier)
    ),

    notify_statement: $ => seq(
      'NOTIFY',
      field('channel', $.identifier),
      optional(seq(',', field('payload', $.string)))
    ),

    unlisten_statement: $ => seq(
      'UNLISTEN',
      choice(
        field('channel', $.identifier),
        '*'
      )
    ),

    prepare_statement: $ => seq(
      'PREPARE',
      field('name', $.identifier),
      optional(seq(
        '(',
        commaSep1(field('type', $.type_name)),
        ')'
      )),
      'AS',
      $._statement
    ),

    execute_statement: $ => seq(
      'EXECUTE',
      field('name', $.identifier),
      optional(seq(
        '(',
        commaSep1(field('parameter', $._expression)),
        ')'
      ))
    ),

    deallocate_statement: $ => seq(
      'DEALLOCATE',
      optional('PREPARE'),
      choice(
        field('name', $.identifier),
        'ALL'
      )
    ),

    // Row-Level Security Policy statements
    create_policy_statement: $ => seq(
      'CREATE', 'POLICY',
      field('name', $.identifier),
      'ON',
      field('table', $._qualified_identifier),
      optional(seq('AS', choice('PERMISSIVE', 'RESTRICTIVE'))),
      optional(seq('FOR', choice('ALL', 'SELECT', 'INSERT', 'UPDATE', 'DELETE'))),
      optional(seq('TO', commaSep1($.grantee))),
      optional(seq('USING', '(', field('using_expression', $._expression), ')')),
      optional(seq('WITH', 'CHECK', '(', field('check_expression', $._expression), ')'))
    ),

    alter_policy_statement: $ => seq(
      'ALTER', 'POLICY',
      field('name', $.identifier),
      'ON',
      field('table', $._qualified_identifier),
      choice(
        seq('RENAME', 'TO', field('new_name', $.identifier)),
        seq(
          optional(seq('TO', commaSep1($.grantee))),
          optional(seq('USING', '(', field('using_expression', $._expression), ')')),
          optional(seq('WITH', 'CHECK', '(', field('check_expression', $._expression), ')'))
        )
      )
    ),

    drop_policy_statement: $ => seq(
      'DROP', 'POLICY',
      optional('IF EXISTS'),
      field('name', $.identifier),
      'ON',
      field('table', $._qualified_identifier),
      optional(choice('CASCADE', 'RESTRICT'))
    ),

  }
});