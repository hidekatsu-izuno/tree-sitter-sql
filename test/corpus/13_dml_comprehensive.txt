================================================================================
INSERT OR REPLACE
================================================================================

INSERT OR REPLACE INTO users (id, name, email) VALUES (1, 'John Doe', 'john@example.com');

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (ERROR
      (identifier))
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (identifier)
    (values_clause
      (integer)
      (string)
      (string))))

================================================================================
INSERT OR IGNORE
================================================================================

INSERT OR IGNORE INTO users (name, email) VALUES ('Jane Doe', 'jane@example.com');

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (ERROR
      (identifier))
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (values_clause
      (string)
      (string))))

================================================================================
INSERT OR ABORT
================================================================================

INSERT OR ABORT INTO users (name, email) VALUES ('Bob Smith', 'bob@example.com');

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (ERROR
      (identifier))
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (values_clause
      (string)
      (string))))

================================================================================
INSERT OR ROLLBACK
================================================================================

INSERT OR ROLLBACK INTO users (name, email) VALUES ('Alice Johnson', 'alice@example.com');

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (ERROR
      (identifier))
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (values_clause
      (string)
      (string))))

================================================================================
INSERT OR FAIL
================================================================================

INSERT OR FAIL INTO users (name, email) VALUES ('Charlie Brown', 'charlie@example.com');

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (ERROR
      (identifier))
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (values_clause
      (string)
      (string))))

================================================================================
INSERT with complex UPSERT
================================================================================

INSERT INTO products (id, name, price, category) 
VALUES (1, 'Widget', 19.99, 'gadgets')
ON CONFLICT(id) DO UPDATE SET 
  name = excluded.name,
  price = excluded.price,
  category = excluded.category,
  updated_at = CURRENT_TIMESTAMP
WHERE excluded.price > products.price;

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (identifier)
    (identifier)
    (values_clause
      (integer)
      (string)
      (real)
      (string))
    (on_conflict_clause
      (identifier)
      (update_set
        (identifier)
        (qualified_identifier
          (identifier)
          (identifier)))
      (update_set
        (identifier)
        (qualified_identifier
          (identifier)
          (identifier)))
      (update_set
        (identifier)
        (qualified_identifier
          (identifier)
          (identifier)))
      (update_set
        (identifier)
        (qualified_identifier
          (identifier)))
      (where_clause
        (binary_expression
          (qualified_identifier
            (identifier)
            (identifier))
          (qualified_identifier
            (identifier)
            (identifier)))))))

================================================================================
INSERT with ON CONFLICT DO NOTHING
================================================================================

INSERT INTO users (email, name) 
VALUES ('test@example.com', 'Test User')
ON CONFLICT(email) DO NOTHING;

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (values_clause
      (string)
      (string))
    (on_conflict_clause
      (identifier))))

================================================================================
INSERT with RETURNING
================================================================================

INSERT INTO orders (customer_id, total, status) 
VALUES (123, 299.99, 'pending')
RETURNING id, created_at, total;

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (identifier)
    (values_clause
      (integer)
      (real)
      (string))
    (returning_clause
      (qualified_identifier
        (identifier))
      (qualified_identifier
        (identifier))
      (qualified_identifier
        (identifier)))))

================================================================================
INSERT with WITH clause
================================================================================

WITH new_customer AS (
  SELECT 'John Doe' AS name, 'john@example.com' AS email
)
INSERT INTO customers (name, email)
SELECT name, email FROM new_customer;

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (with_clause
      (common_table_expression
        (identifier)
        (select_statement
          (select_core
            (select_list
              (result_column
                (string)
                (identifier))
              (result_column
                (string)
                (identifier)))))))
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (select_statement
      (select_core
        (select_list
          (result_column
            (qualified_identifier
              (identifier)))
          (result_column
            (qualified_identifier
              (identifier))))
        (from_clause
          (table_or_subquery
            (qualified_identifier
              (identifier))))))))

================================================================================
UPDATE OR REPLACE
================================================================================

UPDATE OR REPLACE users 
SET email = 'newemail@example.com' 
WHERE id = 1;

--------------------------------------------------------------------------------

(source_file
  (update_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (update_set
      (identifier)
      (string))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))))

================================================================================
UPDATE with JOIN-like FROM
================================================================================

UPDATE users 
SET status = 'premium',
    discount_rate = p.rate
FROM pricing_tiers p
WHERE users.tier_id = p.id 
  AND p.tier_name = 'premium';

--------------------------------------------------------------------------------

(source_file
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (string))
    (update_set
      (identifier)
      (qualified_identifier
        (identifier)
        (identifier)))
    (ERROR
      (identifier)
      (identifier)
      (identifier))
    (where_clause
      (binary_expression
        (binary_expression
          (qualified_identifier
            (identifier)
            (identifier))
          (binary_expression
            (qualified_identifier
              (identifier)
              (identifier))
            (qualified_identifier
              (identifier)
              (identifier))))
        (string)))))

================================================================================
UPDATE with subquery
================================================================================

UPDATE products 
SET average_rating = (
  SELECT AVG(rating) 
  FROM reviews 
  WHERE reviews.product_id = products.id
)
WHERE id IN (
  SELECT DISTINCT product_id 
  FROM reviews 
  WHERE created_at > DATE('now', '-30 days')
);

--------------------------------------------------------------------------------

(source_file
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (subquery_expression
        (select_statement
          (select_core
            (select_list
              (result_column
                (function_call
                  (identifier)
                  (qualified_identifier
                    (identifier)))))
            (from_clause
              (table_or_subquery
                (qualified_identifier
                  (identifier))))
            (where_clause
              (binary_expression
                (qualified_identifier
                  (identifier)
                  (identifier))
                (qualified_identifier
                  (identifier)
                  (identifier))))))))
    (where_clause
      (in_expression
        (qualified_identifier
          (identifier))
        (select_statement
          (select_core
            (select_list
              (result_column
                (qualified_identifier
                  (identifier))))
            (from_clause
              (table_or_subquery
                (qualified_identifier
                  (identifier))))
            (where_clause
              (binary_expression
                (qualified_identifier
                  (identifier))
                (function_call
                  (identifier)
                  (string)
                  (string))))))))))

================================================================================
UPDATE with tuple assignment
================================================================================

UPDATE coordinates 
SET (x, y, z) = (10.5, 20.3, 15.7)
WHERE point_id = 1;

--------------------------------------------------------------------------------

(source_file
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (identifier)
      (identifier)
      (parenthesized_expression
        (ERROR
          (real)
          (real))
        (real)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))))

================================================================================
UPDATE with RETURNING
================================================================================

UPDATE inventory 
SET quantity = quantity - 5,
    last_updated = CURRENT_TIMESTAMP
WHERE product_id = 123
RETURNING product_id, quantity, last_updated;

--------------------------------------------------------------------------------

(source_file
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))
    (update_set
      (identifier)
      (qualified_identifier
        (identifier)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))
    (returning_clause
      (qualified_identifier
        (identifier))
      (qualified_identifier
        (identifier))
      (qualified_identifier
        (identifier)))))

================================================================================
DELETE with complex WHERE
================================================================================

DELETE FROM users 
WHERE (status = 'inactive' AND last_login < DATE('now', '-1 year'))
   OR (status = 'suspended' AND created_at < DATE('now', '-2 years'))
   OR (email_verified = 0 AND created_at < DATE('now', '-30 days'));

--------------------------------------------------------------------------------

(source_file
  (delete_statement
    (qualified_identifier
      (identifier))
    (where_clause
      (binary_expression
        (binary_expression
          (parenthesized_expression
            (binary_expression
              (binary_expression
                (qualified_identifier
                  (identifier))
                (binary_expression
                  (string)
                  (qualified_identifier
                    (identifier))))
              (function_call
                (identifier)
                (string)
                (string))))
          (parenthesized_expression
            (binary_expression
              (binary_expression
                (qualified_identifier
                  (identifier))
                (binary_expression
                  (string)
                  (qualified_identifier
                    (identifier))))
              (function_call
                (identifier)
                (string)
                (string)))))
        (parenthesized_expression
          (binary_expression
            (binary_expression
              (qualified_identifier
                (identifier))
              (binary_expression
                (integer)
                (qualified_identifier
                  (identifier))))
            (function_call
              (identifier)
              (string)
              (string))))))))

================================================================================
DELETE with EXISTS subquery
================================================================================

DELETE FROM customers 
WHERE NOT EXISTS (
  SELECT 1 FROM orders 
  WHERE orders.customer_id = customers.id
  AND orders.created_at > DATE('now', '-2 years')
);

--------------------------------------------------------------------------------

(source_file
  (delete_statement
    (qualified_identifier
      (identifier))
    (where_clause
      (exists_expression
        (select_statement
          (select_core
            (select_list
              (result_column
                (integer)))
            (from_clause
              (table_or_subquery
                (qualified_identifier
                  (identifier))))
            (where_clause
              (binary_expression
                (binary_expression
                  (qualified_identifier
                    (identifier)
                    (identifier))
                  (binary_expression
                    (qualified_identifier
                      (identifier)
                      (identifier))
                    (qualified_identifier
                      (identifier)
                      (identifier))))
                (function_call
                  (identifier)
                  (string)
                  (string))))))))))

================================================================================
DELETE with RETURNING
================================================================================

DELETE FROM expired_sessions 
WHERE expires_at < CURRENT_TIMESTAMP
RETURNING session_id, user_id, expires_at;

--------------------------------------------------------------------------------

(source_file
  (delete_statement
    (qualified_identifier
      (identifier))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (qualified_identifier
          (identifier))))
    (returning_clause
      (qualified_identifier
        (identifier))
      (qualified_identifier
        (identifier))
      (qualified_identifier
        (identifier)))))

================================================================================
REPLACE statement
================================================================================

REPLACE INTO users (id, name, email) VALUES (1, 'John Updated', 'john.updated@example.com');

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (identifier)
    (values_clause
      (integer)
      (string)
      (string))))

================================================================================
INSERT with multiple VALUES sets
================================================================================

INSERT INTO products (name, price, category) VALUES 
  ('Product A', 29.99, 'electronics'),
  ('Product B', 49.99, 'electronics'),
  ('Product C', 19.99, 'books'),
  ('Product D', 99.99, 'clothing'),
  ('Product E', 9.99, 'accessories');

--------------------------------------------------------------------------------

(source_file
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (identifier)
    (values_clause
      (string)
      (real)
      (string)
      (string)
      (real)
      (string)
      (string)
      (real)
      (string)
      (string)
      (real)
      (string)
      (string)
      (real)
      (string))))

================================================================================
DELETE with LIMIT
================================================================================

DELETE FROM logs WHERE created_at < DATE('now', '-30 days') LIMIT 1000;

--------------------------------------------------------------------------------

(source_file
  (delete_statement
    (qualified_identifier
      (identifier))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (function_call
          (identifier)
          (string)
          (string)))))
  (ERROR
    (integer)))
