================================================================================
Basic transaction
================================================================================

BEGIN;
INSERT INTO accounts (name, balance) VALUES ('John', 1000);
UPDATE accounts SET balance = balance - 100 WHERE name = 'John';
UPDATE accounts SET balance = balance + 100 WHERE name = 'Jane';
COMMIT;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (values_clause
      (string)
      (integer)))
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (string))))
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (string))))
  (commit_statement))

================================================================================
Transaction with ROLLBACK
================================================================================

BEGIN TRANSACTION;
DELETE FROM users WHERE status = 'inactive';
SELECT COUNT(*) FROM users;
ROLLBACK;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (delete_statement
    (qualified_identifier
      (identifier))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (string))))
  (select_statement
    (select_core
      (select_list
        (result_column
          (function_call
            (identifier))))
      (from_clause
        (table_or_subquery
          (qualified_identifier
            (identifier))))))
  (rollback_statement))

================================================================================
DEFERRED transaction
================================================================================

BEGIN DEFERRED TRANSACTION;
SELECT * FROM inventory WHERE product_id = 123 FOR UPDATE;
UPDATE inventory SET quantity = quantity - 5 WHERE product_id = 123;
COMMIT TRANSACTION;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (select_statement
    (select_core
      (select_list)
      (from_clause
        (table_or_subquery
          (qualified_identifier
            (identifier))))
      (where_clause
        (binary_expression
          (qualified_identifier
            (identifier))
          (integer)))
      (for_update_clause)))
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer))))
  (commit_statement))

================================================================================
IMMEDIATE transaction
================================================================================

BEGIN IMMEDIATE;
UPDATE accounts SET balance = balance * 1.05;
INSERT INTO audit_log (action, timestamp) VALUES ('interest_applied', CURRENT_TIMESTAMP);
COMMIT;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (real))))
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (values_clause
      (string)
      (qualified_identifier
        (identifier))))
  (commit_statement))

================================================================================
EXCLUSIVE transaction
================================================================================

BEGIN EXCLUSIVE;
DELETE FROM expired_sessions;
VACUUM;
COMMIT;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (delete_statement
    (qualified_identifier
      (identifier)))
  (vacuum_statement)
  (commit_statement))

================================================================================
Savepoint usage
================================================================================

BEGIN;
UPDATE products SET price = price * 1.1;
SAVEPOINT price_increase;
UPDATE products SET price = price * 1.1 WHERE category = 'luxury';
ROLLBACK TO SAVEPOINT price_increase;
UPDATE products SET price = price * 1.05 WHERE category = 'luxury';
RELEASE SAVEPOINT price_increase;
COMMIT;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (real))))
  (savepoint_statement
    (identifier))
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (real)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (string))))
  (rollback_statement
    (identifier))
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (real)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (string))))
  (release_statement
    (identifier))
  (commit_statement))

================================================================================
Nested savepoints
================================================================================

BEGIN;
INSERT INTO orders (customer_id, total) VALUES (1, 100);
SAVEPOINT order_created;
INSERT INTO order_items (order_id, product_id, quantity) VALUES (LAST_INSERT_ROWID(), 10, 2);
SAVEPOINT items_added;
UPDATE inventory SET quantity = quantity - 2 WHERE product_id = 10;
ROLLBACK TO items_added;
RELEASE order_created;
COMMIT;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (values_clause
      (integer)
      (integer)))
  (savepoint_statement
    (identifier))
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (identifier)
    (values_clause
      (function_call
        (identifier))
      (integer)
      (integer)))
  (savepoint_statement
    (identifier))
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer))))
  (rollback_statement
    (identifier))
  (release_statement
    (identifier))
  (commit_statement))

================================================================================
Transaction with error handling
================================================================================

BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 500 WHERE id = 1;
UPDATE accounts SET balance = balance + 500 WHERE id = 2;
INSERT INTO transfers (from_account, to_account, amount) VALUES (1, 2, 500);
COMMIT;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer))))
  (update_statement
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (integer))))
  (insert_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)
    (identifier)
    (values_clause
      (integer)
      (integer)
      (integer)))
  (commit_statement))

================================================================================
Read-only transaction pattern
================================================================================

BEGIN DEFERRED;
SELECT * FROM accounts WHERE id = 1;
SELECT * FROM transactions WHERE account_id = 1 ORDER BY date DESC LIMIT 10;
COMMIT;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (select_statement
    (select_core
      (select_list)
      (from_clause
        (table_or_subquery
          (qualified_identifier
            (identifier))))
      (where_clause
        (binary_expression
          (qualified_identifier
            (identifier))
          (integer)))))
  (select_statement
    (select_core
      (select_list)
      (from_clause
        (table_or_subquery
          (qualified_identifier
            (identifier))))
      (where_clause
        (binary_expression
          (qualified_identifier
            (identifier))
          (integer))))
    (order_by_clause
      (ordering_term
        (qualified_identifier
          (identifier))))
    (limit_clause
      (integer)))
  (commit_statement))

================================================================================
Complex transaction with CTE
================================================================================

BEGIN;
WITH account_balances AS (
  SELECT account_id, SUM(amount) AS balance
  FROM transactions
  GROUP BY account_id
)
UPDATE accounts 
SET cached_balance = (
  SELECT balance FROM account_balances WHERE account_balances.account_id = accounts.id
);
COMMIT;

--------------------------------------------------------------------------------

(source_file
  (begin_statement)
  (update_statement
    (with_clause
      (common_table_expression
        (identifier)
        (select_statement
          (select_core
            (select_list
              (result_column
                (qualified_identifier
                  (identifier)))
              (result_column
                (function_call
                  (identifier)
                  (qualified_identifier
                    (identifier)))
                (identifier)))
            (from_clause
              (table_or_subquery
                (qualified_identifier
                  (identifier))))
            (group_by_clause
              (qualified_identifier
                (identifier)))))))
    (qualified_identifier
      (identifier))
    (update_set
      (identifier)
      (subquery_expression
        (select_statement
          (select_core
            (select_list
              (result_column
                (qualified_identifier
                  (identifier))))
            (from_clause
              (table_or_subquery
                (qualified_identifier
                  (identifier))))
            (where_clause
              (binary_expression
                (qualified_identifier
                  (identifier)
                  (identifier))
                (qualified_identifier
                  (identifier)
                  (identifier)))))))))
  (commit_statement))
