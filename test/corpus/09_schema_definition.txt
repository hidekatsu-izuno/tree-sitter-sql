================================================================================
Basic CREATE TABLE
================================================================================

CREATE TABLE users (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

--------------------------------------------------------------------------------

(source_file
  (create_table_statement
    name: (qualified_identifier
      name: (identifier))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint
        value: (qualified_identifier
          name: (identifier))))))

================================================================================
CREATE TABLE with foreign key
================================================================================

CREATE TABLE orders (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  customer_id INTEGER NOT NULL,
  total DECIMAL(10,2) DEFAULT 0.00,
  status TEXT CHECK (status IN ('pending', 'completed', 'cancelled')),
  FOREIGN KEY (customer_id) REFERENCES customers(id) ON DELETE CASCADE
);

--------------------------------------------------------------------------------

(source_file
  (create_table_statement
    name: (qualified_identifier
      name: (identifier))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier)
        size: (integer)
        scale: (integer))
      (column_constraint
        value: (real)))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint
        expression: (in_expression
          expression: (qualified_identifier
            name: (identifier))
          value: (string)
          value: (string)
          value: (string))))
    (table_constraint
      column: (identifier)
      (foreign_key_clause
        table: (qualified_identifier
          name: (identifier))
        column: (identifier)))))

================================================================================
CREATE TABLE IF NOT EXISTS
================================================================================

CREATE TABLE IF NOT EXISTS logs (
  id INTEGER PRIMARY KEY,
  level TEXT NOT NULL DEFAULT 'INFO',
  message TEXT,
  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

--------------------------------------------------------------------------------

(source_file
  (create_table_statement
    name: (qualified_identifier
      name: (identifier))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint)
      (column_constraint
        value: (string)))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier)))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint
        value: (qualified_identifier
          name: (identifier))))))

================================================================================
CREATE TABLE WITHOUT ROWID
================================================================================

CREATE TABLE settings (
  key TEXT PRIMARY KEY,
  value TEXT NOT NULL,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
) WITHOUT ROWID;

--------------------------------------------------------------------------------

(source_file
  (create_table_statement
    name: (qualified_identifier
      name: (identifier))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint
        value: (qualified_identifier
          name: (identifier))))))

================================================================================
CREATE TEMP TABLE
================================================================================

CREATE TEMP TABLE session_data (
  session_id TEXT PRIMARY KEY,
  user_id INTEGER,
  data TEXT,
  expires_at DATETIME
);

--------------------------------------------------------------------------------

(source_file
  (create_table_statement
    name: (qualified_identifier
      name: (identifier))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier))
      (column_constraint))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier)))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier)))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier)))))

================================================================================
CREATE TABLE AS
================================================================================

CREATE TABLE high_value_customers AS
SELECT customer_id, SUM(total) AS total_spent
FROM orders
GROUP BY customer_id
HAVING SUM(total) > 10000;

--------------------------------------------------------------------------------

(source_file
  (create_table_statement
    (qualified_identifier
      (identifier))
    (select_statement
      (select_core
        (select_list
          (result_column
            (qualified_identifier
              (identifier)))
          (result_column
            (function_call
              (identifier)
              (qualified_identifier
                (identifier)))
            (identifier)))
        (from_clause
          (table_or_subquery
            (qualified_identifier
              (identifier))))
        (group_by_clause
          (qualified_identifier
            (identifier))
          (binary_expression
            (function_call
              (identifier)
              (qualified_identifier
                (identifier)))
            (integer)))))))

================================================================================
CREATE INDEX
================================================================================

CREATE INDEX idx_users_email ON users(email);

--------------------------------------------------------------------------------

(source_file
  (create_index_statement
    (qualified_identifier
      (identifier))
    (qualified_identifier
      (identifier))
    (indexed_column
      (qualified_identifier
        (identifier)))))

================================================================================
CREATE UNIQUE INDEX
================================================================================

CREATE UNIQUE INDEX idx_users_username ON users(username);

--------------------------------------------------------------------------------

(source_file
  (create_index_statement
    (qualified_identifier
      (identifier))
    (qualified_identifier
      (identifier))
    (indexed_column
      (qualified_identifier
        (identifier)))))

================================================================================
CREATE PARTIAL INDEX
================================================================================

CREATE INDEX idx_active_users ON users(last_login) WHERE status = 'active';

--------------------------------------------------------------------------------

(source_file
  (create_index_statement
    (qualified_identifier
      (identifier))
    (qualified_identifier
      (identifier))
    (indexed_column
      (qualified_identifier
        (identifier)))
    (where_clause
      (binary_expression
        (qualified_identifier
          (identifier))
        (string)))))

================================================================================
CREATE COMPOSITE INDEX
================================================================================

CREATE INDEX idx_orders_customer_date ON orders(customer_id, order_date DESC, status);

--------------------------------------------------------------------------------

(source_file
  (create_index_statement
    (qualified_identifier
      (identifier))
    (qualified_identifier
      (identifier))
    (indexed_column
      (qualified_identifier
        (identifier)))
    (indexed_column
      (qualified_identifier
        (identifier)))
    (indexed_column
      (qualified_identifier
        (identifier)))))

================================================================================
CREATE VIEW
================================================================================

CREATE VIEW active_customers AS
SELECT c.id, c.name, c.email, COUNT(o.id) AS order_count
FROM customers c
LEFT JOIN orders o ON c.id = o.customer_id
WHERE c.status = 'active'
GROUP BY c.id, c.name, c.email;

--------------------------------------------------------------------------------

(source_file
  (create_view_statement
    (qualified_identifier
      (identifier))
    (select_statement
      (select_core
        (select_list
          (result_column
            (qualified_identifier
              (identifier)
              (identifier)))
          (result_column
            (qualified_identifier
              (identifier)
              (identifier)))
          (result_column
            (qualified_identifier
              (identifier)
              (identifier)))
          (result_column
            (function_call
              (identifier)
              (qualified_identifier
                (identifier)
                (identifier)))
            (identifier)))
        (from_clause
          (table_or_subquery
            (qualified_identifier
              (identifier))
            (identifier))
          (join_clause
            (table_or_subquery
              (qualified_identifier
                (identifier))
              (identifier))
            (join_constraint
              (binary_expression
                (qualified_identifier
                  (identifier)
                  (identifier))
                (qualified_identifier
                  (identifier)
                  (identifier))))))
        (where_clause
          (binary_expression
            (qualified_identifier
              (identifier)
              (identifier))
            (string)))
        (group_by_clause
          (qualified_identifier
            (identifier)
            (identifier))
          (qualified_identifier
            (identifier)
            (identifier))
          (qualified_identifier
            (identifier)
            (identifier)))))))

================================================================================
CREATE TRIGGER
================================================================================

CREATE TRIGGER update_timestamp
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
  UPDATE users SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
END;

--------------------------------------------------------------------------------

(source_file
  (create_trigger_statement
    (qualified_identifier
      (identifier))
    (qualified_identifier
      (identifier))
    (update_statement
      (qualified_identifier
        (identifier))
      (update_set
        (identifier)
        (qualified_identifier
          (identifier)))
      (where_clause
        (binary_expression
          (qualified_identifier
            (identifier))
          (qualified_identifier
            (identifier)
            (identifier)))))))

================================================================================
CREATE INSTEAD OF TRIGGER
================================================================================

CREATE TRIGGER view_insert
INSTEAD OF INSERT ON customer_summary
FOR EACH ROW
BEGIN
  INSERT INTO customers (name, email) VALUES (NEW.name, NEW.email);
END;

--------------------------------------------------------------------------------

(source_file
  (create_trigger_statement
    (qualified_identifier
      (identifier))
    (qualified_identifier
      (identifier))
    (insert_statement
      (qualified_identifier
        (identifier))
      (identifier)
      (identifier)
      (values_clause
        (qualified_identifier
          (identifier)
          (identifier))
        (qualified_identifier
          (identifier)
          (identifier))))))

================================================================================
DROP TABLE
================================================================================

DROP TABLE IF EXISTS temp_data;

--------------------------------------------------------------------------------

(source_file
  (drop_statement
    (qualified_identifier
      (identifier))))

================================================================================
DROP INDEX
================================================================================

DROP INDEX idx_users_email;

--------------------------------------------------------------------------------

(source_file
  (drop_statement
    (qualified_identifier
      (identifier))))

================================================================================
DROP VIEW
================================================================================

DROP VIEW IF EXISTS customer_summary;

--------------------------------------------------------------------------------

(source_file
  (drop_statement
    (qualified_identifier
      (identifier))))

================================================================================
DROP TRIGGER
================================================================================

DROP TRIGGER update_timestamp;

--------------------------------------------------------------------------------

(source_file
  (drop_statement
    (qualified_identifier
      (identifier))))

================================================================================
ALTER TABLE ADD COLUMN
================================================================================

ALTER TABLE users ADD COLUMN phone TEXT;

--------------------------------------------------------------------------------

(source_file
  (alter_table_statement
    table: (qualified_identifier
      name: (identifier))
    (column_definition
      name: (identifier)
      type: (type_name
        name: (identifier)))))

================================================================================
ALTER TABLE RENAME TO
================================================================================

ALTER TABLE old_users RENAME TO users_backup;

--------------------------------------------------------------------------------

(source_file
  (alter_table_statement
    (qualified_identifier
      (identifier))
    (identifier)))

================================================================================
ALTER TABLE RENAME COLUMN
================================================================================

ALTER TABLE users RENAME COLUMN email TO email_address;

--------------------------------------------------------------------------------

(source_file
  (alter_table_statement
    (qualified_identifier
      (identifier))
    (identifier)
    (identifier)))

================================================================================
ALTER TABLE DROP COLUMN
================================================================================

ALTER TABLE users DROP COLUMN temp_field;

--------------------------------------------------------------------------------

(source_file
  (alter_table_statement
    (qualified_identifier
      (identifier))
    (identifier)))
